import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:file_picker/file_picker.dart';
import 'package:path/path.dart' as path;
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;

import '../utils/colors.dart';
import '../widgets/gradient_button.dart';

class AdminReportScreen extends StatefulWidget {
  const AdminReportScreen({super.key});

  @override
  State<AdminReportScreen> createState() => _AdminReportScreenState();
}

class _AdminReportScreenState extends State<AdminReportScreen> {
  final TextEditingController _reportTitleController = TextEditingController();
  final TextEditingController _reportContentController = TextEditingController();
  final DateTime _currentDate = DateTime.now();
  bool _titleError = false;
  bool _contentError = false;

  Future<Uint8List> _loadImageBytes(String assetPath) async {
    final bytes = await rootBundle.load(assetPath);
    return bytes.buffer.asUint8List();
  }

Future<void> _exportPdf(String filePath) async {
    final pdf = pw.Document();

    final imageBytes = await _loadImageBytes('assets/images/logofilled.png');
    final image = pw.MemoryImage(imageBytes);

    pdf.addPage(
      pw.MultiPage(
        pageTheme: pw.PageTheme(
          pageFormat: PdfPageFormat.a4,
          buildBackground: (context) => pw.Container(
            color: PdfColors.black, // Set the background to black
          ),
        ),
        build: (context) => [
          pw.Container(
            alignment: pw.Alignment.centerLeft,
            child: pw.Image(image, width: 120, height: 120),
          ),
          pw.SizedBox(height: 12),
          pw.Container(
            alignment: pw.Alignment.centerLeft,
            child: pw.Text(
              'Bioskopina Admin Report',
              style: pw.TextStyle(
                fontSize: 28,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.white, // White text
              ),
            ),
          ),
          pw.SizedBox(height: 12),
          pw.Text('Title: ${_reportTitleController.text}',
              style: pw.TextStyle(fontSize: 16, color: PdfColors.white)),
          pw.Text('Date: ${_currentDate.toIso8601String().split("T")[0]}',
              style: pw.TextStyle(fontSize: 14, color: PdfColors.grey300)), // Light grey
          pw.SizedBox(height: 20),
          pw.Text('Report Content:',
              style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold, color: PdfColors.white)),
          pw.SizedBox(height: 8),
          pw.Text(_reportContentController.text,
              style: pw.TextStyle(fontSize: 14, color: PdfColors.white)),
          pw.SizedBox(height: 30),
          pw.Container(
            alignment: pw.Alignment.centerRight,
            child: pw.Text(
              'Generated by Bioskopina Admin Panel',
              style: pw.TextStyle(fontSize: 12, color: PdfColors.grey300), // Light grey
            ),
          ),
        ],
      ),
    );

    final bytes = await pdf.save();
    final file = File(filePath);
    await file.writeAsBytes(bytes);
  }
  void _showExportSuccessDialog(String filePath) {
    showDialog(
      context: context,
      barrierDismissible: false,


      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
            side: BorderSide(
              color: Colors.grey.withOpacity(0.5),
              width: 1.5,
            ),
          ),
          backgroundColor: Colors.black,
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(
                  Icons.task_alt,
                  color: Color.fromRGBO(102, 204, 204, 1),
                  size: 50,
                ),
                const SizedBox(height: 10),
                const Text(
                  "Successfully exported!",
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 20),

                InkWell(
                  borderRadius: BorderRadius.circular(30),
                  onTap: () => Navigator.of(context).pop(),
                  child: Container(
                    width: 82,
                    height: 30,
                    decoration: BoxDecoration(
                      gradient: Palette.buttonGradient,
                      borderRadius: BorderRadius.circular(30),
                    ),
                    alignment: Alignment.center,
                    child: const Text(
                      "OK",
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> _onExportButtonPressed() async {
    setState(() {
      _titleError = _reportTitleController.text.isEmpty;
      _contentError = _reportContentController.text.isEmpty;
    });

    if (_titleError || _contentError) {
      return;
    }

    String defaultFileName =
        'Bioskopina_Admin_Report_${_currentDate.toIso8601String().split("T")[0]}.pdf';

    String? selectedPath;

    try {
      // Show loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(
          child: CircularProgressIndicator(),
        ),
      );

      if (Platform.isWindows || Platform.isLinux || Platform.isMacOS) {
        selectedPath = await FilePicker.platform.saveFile(
          dialogTitle: 'Save PDF Report As',
          fileName: defaultFileName,
          type: FileType.custom,
          allowedExtensions: ['pdf'],
          lockParentWindow: true,
        );

        // Ensure the path has .pdf extension
        if (selectedPath != null && !selectedPath.toLowerCase().endsWith('.pdf')) {
          selectedPath = '$selectedPath.pdf';
        }
      } else {
        String? folderPath = await FilePicker.platform.getDirectoryPath(
          dialogTitle: 'Select folder to save PDF report',
        );
        if (folderPath != null) {
          // Use the default filename for mobile
          selectedPath = path.join(folderPath, defaultFileName);
        }
      }

      if (selectedPath == null) {
        // User cancelled picking
        Navigator.of(context).pop(); // Close loading indicator
        return;
      }

      await _exportPdf(selectedPath);

      // Close loading indicator
      Navigator.of(context).pop();

      // Show success dialog
      _showExportSuccessDialog(selectedPath);

    } catch (e) {
      // Close loading indicator if still showing
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error saving report: ${e.toString()}'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Widget _buildTextField(TextEditingController controller, String label, IconData icon) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        TextField(
          controller: controller,
          style: const TextStyle(color: Colors.white, fontSize: 16),
          decoration: InputDecoration(
            prefixIcon: Icon(icon, color: Colors.white70),
            labelText: label,
            labelStyle: const TextStyle(color: Colors.white),
            filled: true,
            fillColor: Colors.white.withOpacity(0.1), // Darker background
            contentPadding: const EdgeInsets.symmetric(vertical: 14, horizontal: 18),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(20),
              borderSide: BorderSide.none,
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(20),
              borderSide: BorderSide(color: Colors.white.withOpacity(0.3), width: 1),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(20),
              borderSide: const BorderSide(color: Colors.red, width: 1),
            ),
          ),
          onChanged: (value) {
            if (value.isNotEmpty && _titleError) {
              setState(() {
                _titleError = false;
              });
            }
          },
        ),
        if (_titleError && label == 'Report Title')
          Padding(
            padding: const EdgeInsets.only(left: 16.0, top: 4.0),
            child: Text(
              'Please enter a title',
              style: TextStyle(color: Colors.red[300], fontSize: 12),
            ),
          ),
      ],
    );
  }

  Widget _buildMultilineField(TextEditingController controller, String label, IconData icon) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        TextField(
          controller: controller,
          maxLines: 7,
          style: const TextStyle(color: Colors.white, fontSize: 15),
          decoration: InputDecoration(
            prefixIcon: Icon(icon, color: Colors.white70),
            labelText: label,
            labelStyle: const TextStyle(color: Colors.white),
            filled: true,
            fillColor: Colors.grey.withOpacity(0.3), // Darker background
            contentPadding: const EdgeInsets.symmetric(vertical: 14, horizontal: 18),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(20),
              borderSide: BorderSide.none,
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(20),
              borderSide: BorderSide(color: Colors.white.withOpacity(0.3), width: 1),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(20),
              borderSide: const BorderSide(color: Colors.red, width: 1),
            ),
          ),
          onChanged: (value) {
            if (value.isNotEmpty && _contentError) {
              setState(() {
                _contentError = false;
              });
            }
          },
        ),
        if (_contentError)
          Padding(
            padding: const EdgeInsets.only(left: 16.0, top: 4.0),
            child: Text(
              'Please enter report content',
              style: TextStyle(color: Colors.red[300], fontSize: 12),
            ),
          ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(
            'assets/images/starsbg.png',
            fit: BoxFit.cover,
            color: Colors.black.withOpacity(0.7),
            colorBlendMode: BlendMode.darken,
          ),
          Scaffold(
            backgroundColor: Colors.transparent,
            appBar: AppBar(
              leading: IconButton(
                icon: const Icon(Icons.menu, color: Colors.white),
                onPressed: () => Navigator.of(context).pop(),
              ),
              backgroundColor: Colors.black.withOpacity(0.7),
              title: Row(
                children: [
                  const Icon(Icons.admin_panel_settings, color: Colors.white),
                  const SizedBox(width: 10),
                  Text(
                    'Admin Report',
                    style: const TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.w700,
                        fontSize: 22),
                  ),
                ],
              ),
              elevation: 0,
            ),
            body: Center(
              child: Container(
                constraints: const BoxConstraints(maxWidth: 550),
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildTextField(_reportTitleController, 'Report Title', Icons.title),
                      const SizedBox(height: 20),
                      Row(
                        children: [
                          const Icon(Icons.calendar_today, color: Colors.white),
                          const SizedBox(width: 10),
                          Text(
                            'Date: ${_currentDate.toIso8601String().split("T")[0]}',
                            style: const TextStyle(color: Colors.white, fontSize: 16),
                          ),
                        ],
                      ),
                      const SizedBox(height: 20),
                      _buildMultilineField(_reportContentController, 'Report Content', Icons.description),
                      const SizedBox(height: 80),
                    ],
                  ),
                ),
              ),
            ),
            floatingActionButton: Padding(
              padding: const EdgeInsets.only(bottom: 20.0, right: 20.0),
              child: Container(
                width: 80,
                height: 80,
                decoration: BoxDecoration(
                  color: Colors.black,
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: Colors.grey,
                    width: 0.5,
                  ),
                ),
                child: IconButton(
                  icon: const Icon(
                    Icons.picture_as_pdf,
                    size: 48,
                    color: Colors.red,
                  ),
                  onPressed: _onExportButtonPressed,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}